package chap02;
import java.util.Scanner;
public class KetboardInput2 {
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		System.out.print("Input the name, age and weight devided with spaces : ");
		String name = stdIn.next();
		int i = stdIn.nextInt();
		double d = stdIn.nextDouble();
		System.out.println(name + "씨의 나이는" + i + "세이고");
		System.out.println("몸무게는 " + d + "kg입니다.");
	}
}


package chap03;
public class NumericTypeTest {
	public static void main(String[] args) {
		//자바에서 정수리터럴은 무조건 int형으로 취급한다. 한다고 해도 -128~127까지만 허용된다.
		byte a = 127;
		System.out.println("127을 저장한 byte값은 : " + a);
		short b = 32767;
		System.out.println("32767을 저장한 byte값은 : " + b);
		int c = 2147483647;
		System.out.println("2147483647을 저장한 byte값은 : " + c);
		long d = 9223372036854775807L;
		System.out.println("9223372036854775807L을 저장한 byte값은 : " + d);
	}
}


package chap03;
public class OctHexTest {
	public static void main(String[] args) {
		int a = 100;
		int b = 0b11000100;
		int c = 0144;
		int d = 0x64;
		System.out.println("10진수 100 = " + a); //100
		System.out.println("2진수 0b11000100 = " + b); //100
		System.out.println("8진수 0144 = " + c); //100
		System.out.println("16진수 0x64 = " + d); //100
		System.out.println("2진수 0b111 = " + 0b111); //7
		System.out.println("8진수 0777 = " + 0777); //511
		System.out.println("16진수 0xfff = " + 0xfff); //4095
	}
}


package chap03;
public class FloatDoubleTest {
	public static void main(String[] args) {
		float a = 12345678901234567890.0f; //float형을 사용할때는 마지막에 f를 꼭 붙여야 한다.
		double b = 12345678901234567890.0; //묵시적으로 실수는 double로 간주한다. 그러므로 끝에 d를 붙이지 않아도 된다.
		System.out.println("float 변수 a의 값 : " +a); //1.23456789E19
		System.out.println("double 변수 b의 값 : " +b); //1.2345678901234567890E19
		float c = 1.0f / 3.0f;
		double d = 1.0 / 3.0; //두 결과값 모두 무한히 반복되는 수지만 표현 가능 범위 내의 부분에서만 저장되고 출력된다.
		System.out.println("float 변수 c의 값 : " +c); //0.33333334
		System.out.println("double 변수 d의 값 : " +d); //0.3333333333333333
	}
}


package ch03;
public class TestCharString {
	public static void main(String[] args) {
		char ch1 = 'A';
		String name = "홍길동";
		System.out.printf("%c\n", 'A');
		System.out.printf("%s\n", "AB");
		System.out.printf("%s\n", "AB CCCC");
		System.out.printf("%s씨 %s\n%s\n", name, "재미있는 자바언어", "열심히 하세요.");
	}
}



package ch03;
import java.util.Scanner;
public class DataTypeOpertion1 {
	public static void main(String[] args) {
		Scanner stdin = new Scanner(System.in);
		System.out.print("Type first number : ");
		int first = stdin.nextInt();
		System.out.print("Type second number : ");
		int second = stdin.nextInt();
		double avg1 = (first + second) / 2;
		System.out.println("Integral number Calcuation : Average is ("+first+" + "+second+")/2" + " = "+ ""+avg1+"");
		double avg2 = (first + second) / 2.0;
		System.out.println("Real number Calcuation : Average is ("+first+" + "+second+")/2.0" + " = "+ ""+avg2+"");
	}
}



package ch03;
public class TypeCastingTest1 {
	public static void main(String[] args) {
		byte b = 120;
		int i = b;
		System.out.println("확대 형 변환 : " +i); //120
		int j = 259;
		double d = 259.428;
		System.out.println("축소 형 변환 결과");
		b = (byte) j; //int형의 값을 byte형으로 형 변환하여 저장(값 손실)
		System.out.println("int 259를 byte로 변환 : " +b); //3
		i = (int) d; //double형의 값을 int형으로 형 변환하여 저장(값 손실)
		System.out.println("double 259.428을 int로 변환 : " +i); //259
		b = (byte) d; //double형의 값을 byte형으로 형 변환하여 저장(값 손실)
		System.out.println("double 259.428을 byte로 변환 : " +b); //3
	}
}



package ch03;
public class ArithmeticOPTest1 {
	public static void main(String[] args) {
		int a = 7, b = 2;
		int sum = a + b;
		System.out.println("a + b = " +sum);
		int sub = a - b;
		System.out.println("a - b = " +sub);
		int mul = a * b;
		System.out.println("a * b = " +mul);
		int div = a / b;
		System.out.println("a / b = " +div);
		int mod = a % b;
		System.out.println("a % b = " +mod);
		int c = ++a;
		System.out.println("a 전위 증가 연산 (prefix) = " +c);
		System.out.println("a = " +a);
		int d = b++;
		System.out.println("b의 후위 증가 연산 (postfix) = " +d);
		System.out.println("b = " +b);
		//전위 증가 연산이든 후위 증가 연산이든 먼저 나온 명령어대로 처리한다.
	}
}



package ch03;
public class ArithmeticOPTest2 {
	public static void main(String[] args) {
		byte a = 127, b = 2;
		byte c = (byte)(a * b);
		System.out.println("a * b의 결과를 byte로 출력 : " +c);
		int d = a * b;
		System.out.println("a * b의 결과를 int로 출력 : " +d);
		int i = 1000000, j = 1000000; //이미 둘다 int의 범위를 벗어남
		int k = i * j; //그러므로 k도 당연히 int의 범위를 벗어나게 된다
		System.out.println("i * j의 결과를 int로 출력 : " +k); //X
		long m = (long)(i * j); //이미 int의 범위를 벗어난 상태에서 형 변환하는거라 소용 없음
		System.out.println("i * j의 결과를 long으로 변환한 후 출력 : " +m); //X
		m = (long)i * j; //변수 i를 long 변환 후에 long 곱연산
		System.out.println("i를 long값으로 변환후에 곱셈(long 연산)하여 출력 : " +m); //O
		m = (long) i * (long)j; //각각의 long으로 형 변환 후 long 연산
		System.out.println("백만을 long으로 변환 후 곱셈(long 연산)하여 출력 : " +m); //O
	}
}



package ch03;
public class ArithmeticOPTEST3 {
	public static void main(String[] args) {
		int a = 10;
		System.out.println("(++a + ++a)의 결과는 : " + (++a + ++a)); //11 + 12
		a = 10;
		System.out.println("(++a - ++a)의 결과는 : " + (++a - ++a)); //11 - 12
		a = 10;
		System.out.println("(a++ + a++)의 결과는 : " + (a++ + a++)); //10 + 11
		a = 10;
		System.out.println("(a++ - a++)의 결과는 : " + (a++ - a++)); //10 - 11
		a = 10;
		System.out.println("(++a + a++)의 결과는 : " + (++a + a++)); //11 + 11
		a = 10;
		System.out.println("(++a - a++)의 결과는 : " + (++a - a++)); //11 - 11
		a = 10;
		System.out.println("(a++ + ++a)의 결과는 : " + (a++ + ++a)); //10 + 12
		a = 10;
		System.out.println("(a++ - ++a)의 결과는 : " + (a++ - ++a)); //10 - 12
	}
}



package ch03;
public class RelationalOPTest {
	public static void main(String[] args) {
		byte a = 20;
		double d = 3.14;
		boolean flag;
		flag = a > d;
		System.out.println("a가 b보다 큰가?\t" +flag);
		flag = a == 20.0f; //byte형이 float형으로 자동 변환
		System.out.println("a가 20.0f보다 같은가?\t" +flag);
		flag = 10 != 10.0; //정수 리터럴 10이 실수로 변환되어 비교
		System.out.println("10이 10.0과 같지 않은가?\t" +flag);
		flag = 10 <= 20;
		System.out.println("10이 20보다 작거나 같은가?\t" +flag);
		System.out.println("10이 20보다 작은가?\t" + (10 < 20)); //관계연산자를 직접 출력문에 사용
		System.out.println("10이 20보다 크거나 같은가?\t" + (10 >= 20));
	}
}



package ch03;
public class LogicalOPTest {
	public static void main(String[] args) {
		boolean a = (20 > 10) || (30 > 40); //OR논리연산자
		System.out.println("20이 10보다 크거나 또는 30이 40보다 큰가?" +a);
		a = (20 > 10) && (30 > 40); //AND논리연산자
		System.out.println("20이 10보다 크고 30이 40보다 큰가?" +a);
		a = !true; //NOT논리연산자
		System.out.println("true의 !(not)은?" +a);
		System.out.println("20이 10보다 크거나 또는 30이 40보다 큰가?" + ((20 > 10) || (30 > 40)));
		System.out.println("20이 10보다 크고 30이 40보다 큰가?" + ((20 > 10) && (30 > 40)));
		System.out.println("true의 !(not)은??" + (!true));
	}
}



package ch03;
public class BitOPTest {
	public static void main(String[] args) {
		int a = 14;
		int b = 11; //14에 대한 2진법 표현
		System.out.println("a = " +a+"("+Integer.toBinaryString(a)+")");//14(1110)
		System.out.println("b = " +b+"("+Integer.toBinaryString(b)+")");//11(1011)
		System.out.println("a & b = " +(a & b)+"("+Integer.toBinaryString(a & b)+")");//10(1010)
		System.out.println("a | b = " +(a | b)+"("+Integer.toBinaryString(a | b)+")");//15(1111)
		System.out.println("a ^ b = " +(a ^ b)+"("+Integer.toBinaryString(a ^ b)+")");//5(101)
		System.out.println("~b = " +(~b)+"("+Integer.toBinaryString(~b)+")");
		//-12(11111111111111111111111111110100)
	}
}



package ch03;
public class AssignOPTest {
	public static void main(String[] args) {
		int a = 10;
		System.out.println("a = " +a);
		a += 4; //a = a + 4, 14
		System.out.println("a += 4 result : " +a);
		a %= 4; //a = a % 4, 2
		System.out.println("a %= 4 result : " +a);
		a <<= 4; //a = a << 4, 2를 왼쪽으로 4비트 시프트, 32출
		System.out.println("a <<= 4 result : " +a);
		boolean b = false;
		b &= a > 2; //b = b & a > 2를 수행, false
		System.out.println("b &= a > 2 result : " +b);
		b |= a > 2; //b = b | a > 2를 수행, true
		System.out.println("b |= a > 2 result : " +b);
	}
}



